puts 'scanメソッドは引数で渡した正規表現にマッチする部分を配列に入れて返される。'
p '123 456 789'.scan(/\d+/)


puts '正規表現に()があると、キャプチャされた部分が配列の配列になって返ってくる。'
p '1977年7月17日2016年12月31日'.scan(/(\d+)年(\d+)月(\d+)日/)


puts 'グループ化はしたいが、キャプチャはしたくない（マッチした文字列全体を取得したい）という場合は、(?:)というメタ文字を使う'
p '1977年7月17日2016年12月31日'.scan(/(?:\d+)年(?:\d+)月(?:\d+)日/)

puts 'まあシンプルにこれでも良い'
p '1977年7月17日2016年12月31日'.scan(/\d+年\d+月\d+日/)


puts '[]に正規表現を渡すと、文字列から正規表現にマッチした部分を抜き出します。'
text = '郵便番号は123-4567です'
p text[/\d{3}-\d{4}/]
puts 'これだと配列がかえる'
p text.scan(/\d{3}-\d{4}/)


puts 'マッチする部分が複数ある場合は、最初にマッチした文字列が返る'
text2 = '123-4567 999-6789'
p text[/\d{3}-\d{4}/]

puts 'キャプチャを使うと第2引数で何番目のキャプチャを取得するか指定できる'
birthday = '誕生日は1977年7月17日です'
p birthday[/(\d+)年(\d+)月(\d+)日/]
p birthday[/(\d+)年(\d+)月(\d+)日/,3]

puts '名前キャプチャで取得'
p birthday[/(?<year>\d+)年(?<month>\d+)月(?<day>\d+)日/, :year]
puts 'または'
p birthday[/(?<year>\d+)年(?<month>\d+)月(?<day>\d+)日/, 'year']

puts 'sliceメソッドは[]のエイリアスメソッド'
p birthday.slice(/(?<year>\d+)年(?<month>\d+)月(?<day>\d+)日/, :year)

puts '破壊的メソッドであるslice!'
text.slice!(/\d{3}/)
p text

puts 'splitに正規表現を渡すと、マッチした文字列を区切り文字にして文字列を分解し、配列として返します。'
text = '123,456-789'
p text.split(',')

puts '正規表現を使ってカンマまたはハイフンを区切り文字に指定する'
text = '123,456-789'
p text.split(/,|-/)

puts 'gsubメソッドを使うと、第1引数の正規表現にマッチした文字列を第2引数の文字列で置き換えます。'
text = '123,456-789'
p text.gsub(',', ':')

puts '正規表現を渡すと、マッチした部分を第2引数で置き換える'
text = '123,456-789'
p text.gsub(/,|-/, ':')

puts 'キャプチャを使うと、第2引数で\1や\2のようにしてキャプチャした文字列を連番で参照できます。'
p birthday.gsub(/(\d+)年(\d+)月(\d+)日/, '\1/\2/\3')

puts '名前付きキャプチャの場合は\k<name>のようにして参照できます。'
p birthday.gsub(/(?<year>\d+)年(?<month>\d+)月(?<day>\d+)日/, '\k<year>-\k<month>-\k<day>')

puts '第2引数にハッシュを渡して、変換のルールを指定することもできます。'
text = '123,456-789'
hash = {',' => ':', '-' => '/'}
p text.gsub(/,|-/, hash)

puts '第2引数を渡す代わりに、ブロックの戻り値で置き換える文字列を指定することもできます。'
text = '123,456-789'
p text.gsub(/,|-/) { |mathed| mathed == ','? ':' : '/'}

puts 'gsub!メソッドは文字列の内容を破壊的に置換します。'
text = '123,456-789'
text.gsub!(/,|-/, ':')
p text
